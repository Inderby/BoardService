plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
print(dependencyManagement);

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6' //spring initializer에서 security와 thymeleaf를 동시에 넣어야 생성되는 디펜던시
    implementation 'org.springframework.boot:spring-boot-starter-security'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //queryDSL 설정
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    //java.lang.NoClassDefFoundError (javax.annotation.Generated)대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    ////java.lang.NoClassDefFoundError (javax.annotation.Entity)대응 코드
}

tasks.named('test') {
    useJUnitPlatform()
}

/*해당 코드 생성이유
* queryDSL이 자동으로 생성한 클래스를 QClass라고 부름. QClass는 원래 build 디렉토리 안에 들어가게 된다. 그것을 바깥쪽으로 꺼내오기 위해 추가한 코드
* ide를 통해 빌드 할 때 생길 수 있는 잠재적인 문제를 피하기 위함
* gradle build와 ide build의 스캔 영역에 차이로 인해 중복 스캔이 일어나게 되어 충돌이 일어나게 된다.
* */
//Querydsl 설정부
// === Querydsl 빌드 옵션 (선택사항) ===
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}
//Heroku 설정
jar{
    manifest{
        attributes('Main-Class': 'com.example.boardservice.BoardServiceApplication')
    }
}